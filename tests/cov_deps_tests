ds:noawkfs [[
ds:noawkfs ]]
ds:help [[
ds:help ds:commands
ds:help ds:fail
ds:help ds:reo
ds:sort :
ds:sort ds:fail
ds:sort ds:nset
ds:sort sort
ds:sort awk
ds:sort cat
ds:sort ds:file_check
ds:sort ds:pipe_clean
ds:sort echo
ds:sort in
ds:sort let
ds:sort rg
ds:sort shift
ds:sort true
ds:sort xargs
ds:sort else
ds:sort fi
ds:sort grep
ds:sort if
ds:sort then
ds:sort [
ds:sort local
ds:sortm :
ds:sortm cat
ds:sortm ds:fail
ds:sortm ds:file_check
ds:sortm ds:nset
ds:sortm ds:pipe_clean
ds:sortm let
ds:sortm true
ds:sortm awk
ds:sortm echo
ds:sortm in
ds:sortm rg
ds:sortm shift
ds:sortm xargs
ds:sortm else
ds:sortm fi
ds:sortm if
ds:sortm then
ds:sortm grep
ds:sortm [
ds:sortm local
ds:todo continue
ds:todo do
ds:todo done
ds:todo ds:nset
ds:todo else
ds:todo for
ds:todo in
ds:todo return
ds:todo fi
ds:todo grep
ds:todo if
ds:todo rg
ds:todo then
ds:todo echo
ds:todo local
ds:todo [
ds:mini cat
ds:mini ds:file_check
ds:mini ds:pipe_clean
ds:mini else
ds:mini fi
ds:mini if
ds:mini then
ds:mini awk
ds:mini local
ds:embrace echo
ds:embrace [
ds:embrace local
ds:searchn awk
ds:searchn ds:ndata
ds:git_recent_all [
ds:git_recent_all do
ds:git_recent_all done
ds:git_recent_all ds:fit
ds:git_recent_all ds:not_git
ds:git_recent_all ds:sortm
ds:git_recent_all git
ds:git_recent_all log
ds:git_recent_all read
ds:git_recent_all rm
ds:git_recent_all while
ds:git_recent_all awk
ds:git_recent_all cd
ds:git_recent_all return
ds:git_recent_all echo
ds:git_recent_all local
ds:idx cat
ds:idx ds:pipe_clean
ds:idx awk
ds:idx echo
ds:idx else
ds:idx fi
ds:idx if
ds:idx then
ds:idx local
ds:root [
ds:root do
ds:root done
ds:root fi
ds:root for
ds:root if
ds:root in
ds:root local
ds:root printf
ds:root then
ds:sh ps
ds:sh awk
ds:join_by else
ds:join_by fi
ds:join_by if
ds:join_by let
ds:join_by printf
ds:join_by set
ds:join_by then
ds:join_by [
ds:join_by return
ds:join_by shift
ds:join_by echo
ds:join_by local
ds:print_matches File
ds:print_matches cat
ds:print_matches ds:file_check
ds:print_matches echo
ds:print_matches return
ds:print_matches awk
ds:print_matches ds:pipe_clean
ds:print_matches else
ds:print_matches let
ds:print_matches [
ds:print_matches fi
ds:print_matches if
ds:print_matches then
ds:print_matches local
ds:trace [
ds:trace [[
ds:trace ]]
ds:trace ds:readp
ds:trace else
ds:trace eval
ds:trace fi
ds:trace grep
ds:trace if
ds:trace last
ds:trace return
ds:trace then
ds:trace trace
ds:path_elements ]]
ds:path_elements ds:file_check
ds:path_elements printf
ds:path_elements echo
ds:path_elements local
ds:fail [[
ds:fail echo
ds:fail else
ds:fail fi
ds:fail if
ds:fail local
ds:fail then
ds:fail :
ds:print_comps File
ds:print_comps cat
ds:print_comps ds:file_check
ds:print_comps echo
ds:print_comps return
ds:print_comps ds:pipe_clean
ds:print_comps else
ds:print_comps let
ds:print_comps [
ds:print_comps awk
ds:print_comps fi
ds:print_comps if
ds:print_comps then
ds:print_comps local
ds:webpage_title [
ds:webpage_title else
ds:webpage_title fi
ds:webpage_title perl
ds:webpage_title sed
ds:webpage_title then
ds:webpage_title wget
ds:webpage_title if
ds:webpage_title printf
ds:webpage_title local
ds:inferfs ds:file_check
ds:inferfs else
ds:inferfs local
ds:inferfs read
ds:inferfs sed
ds:inferfs awk
ds:inferfs echo
ds:inferfs return
ds:inferfs fi
ds:inferfs if
ds:inferfs then
ds:inferfs true
ds:inferfs [
ds:fit [
ds:fit cat
ds:fit ds:file_check
ds:fit ds:pipe_clean
ds:fit rm
ds:fit awk
ds:fit ds:dequote
ds:fit let
ds:fit tr
ds:fit unset
ds:fit else
ds:fit fi
ds:fit if
ds:fit then
ds:fit true
ds:fit local
ds:iter_str do
ds:iter_str done
ds:iter_str echo
ds:iter_str for
ds:iter_str let
ds:iter_str local
ds:unicode awk
ds:unicode do
ds:unicode done
ds:unicode ds:fail
ds:unicode ds:nset
ds:unicode echo
ds:unicode else
ds:unicode grep
ds:unicode if
ds:unicode in
ds:unicode printf
ds:unicode for
ds:unicode xxd
ds:unicode local
ds:reo [
ds:reo cat
ds:reo ds:file_check
ds:reo ds:pipe_clean
ds:reo let
ds:reo rm
ds:reo awk
ds:reo ds:dequote
ds:reo tr
ds:reo unset
ds:reo else
ds:reo fi
ds:reo if
ds:reo then
ds:reo local
ds:nset [
ds:nset ds:ntype
ds:nset type
ds:filename_str [
ds:filename_str case
ds:filename_str esac
ds:filename_str in
ds:filename_str local
ds:filename_str printf
ds:filename_str read
ds:filename_str echo
ds:filename_str return
ds:commands awk
ds:commands sed
ds:commands sort
ds:commands function
ds:commands grep
ds:commands echo
ds:rev ds:rev
ds:rev fi
ds:rev if
ds:rev local
ds:rev printf
ds:rev read
ds:rev then
ds:fsrc declare
ds:fsrc source
ds:fsrc declare
ds:fsrc ds:searchx
ds:fsrc echo
ds:fsrc elif
ds:fsrc grep
ds:fsrc source
ds:fsrc zsh
ds:fsrc [[
ds:fsrc awk
ds:fsrc head
ds:fsrc return
ds:fsrc which
ds:fsrc [
ds:fsrc bash
ds:fsrc fi
ds:fsrc if
ds:fsrc local
ds:fsrc rm
ds:fsrc then
ds:transpose let
ds:transpose shift
ds:transpose cat
ds:transpose ds:file_check
ds:transpose ds:pipe_clean
ds:transpose awk
ds:transpose else
ds:transpose fi
ds:transpose if
ds:transpose then
ds:transpose local
ds:sedi File
ds:sedi ds:fail
ds:sedi ds:sedi
ds:sedi echo
ds:sedi file
ds:sedi perl
ds:sedi return
ds:sedi local
ds:sedi [
ds:ntype awk
ds:ntype exit
ds:ntype local
ds:jn cat
ds:jn ds:pipe_clean
ds:jn elif
ds:jn awk
ds:jn ds:file_check
ds:jn ds:is_int
ds:jn else
ds:jn [
ds:jn ]]
ds:jn fi
ds:jn if
ds:jn shift
ds:jn [[
ds:jn then
ds:jn local
